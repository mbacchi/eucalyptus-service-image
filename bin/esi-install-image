#!/usr/bin/env python
#
# Copyright 2009-2015 Eucalyptus Systems, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Eucalyptus Systems, Inc., 6750 Navigator Way, Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.
import os
import argparse
import copy
import glob
import re
import subprocess
import sys
import boto
import fcntl
import rpm
from esitoolsupport.esibase import EsiBase

DEFAULT_IMAGE_LOCATION = '/usr/share/eucalyptus/service-images/'


class ImageInfo(object):
    def __init__(self, id, location):
        self.id = id
        self.location = location

    def __copy__(self):
        return self

    def __deepcopy__(self, memo):
        return self


class ServiceImageManager(EsiBase):
    IMAGE_NAME = 'eucalyptus-service-image'
    IMAGE_RE = re.compile('^eucalyptus-service-image')
    # HACK this info should be shared
    PROVIDED_SERVICES = ['imaging', 'loadbalancing', 'database']

    def __init__(self, region, debug=False):
        super(self.__class__, self).__init__(region if region else 'localhost')
        self._ec2 = boto.connect_ec2_endpoint(self.get_env_var('EC2_URL'))
        self._populate_images()
        self._debug = debug


    def _populate_images(self):
        self.images = {}
        for image in self._ec2.get_all_images():
            name = image.name
            if self.IMAGE_RE.search(name):
                version = self._get_image_version(image)
                if not version in self.images:
                    self.images[version] = []
                self.images[version].append(ImageInfo(image.id, image.location))

    def _split_location(self, location):
        matches = re.match(r'(.+)/(.+)\.manifest\.xml', location)
        return matches.groups()

    def _remove(self, images, force=False):
        removed = []
        enabled_images = self.get_enabled()
        for image_set in images.itervalues():
            should_remove = True
            if not force:
                for image in image_set:
                    if image.id in enabled_images:
                        print >> sys.stderr, "Warning: skipping enabled image."
                        print >> sys.stderr, "Use '--force' to remove it anyway."
                        should_remove = False

            if should_remove:
                for image in image_set:
                    self._run_command(['/usr/bin/euca-deregister', image.id, '--region', self.region], self._debug)
                    (bucket, prefix) = self._split_location(image.location)
                    self._run_command(['/usr/bin/euca-delete-bundle', '-b', bucket,
                                       '-p', prefix, '--region', self.region], self._debug)
                    removed.append(image.id)
        return removed

    def _run_command(self, command, debug=False):
        if debug:
            command.append('--debug')
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if debug:
                fd = process.stderr
                fl = fcntl.fcntl(fd, fcntl.F_GETFL)
                fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
        while process.poll() is None:
            if debug:
                try:
                    line = process.stderr.readline()
                    print line.strip()
                except:
                    pass
        stderr = process.stderr.read() if not debug else "SEE OUTPUT ABOVE"
        stdout = process.stdout.read()
        if process.returncode > 0:
            print "Error: Unable to install imaging worker due to:\n" \
                  + stdout + stderr
            sys.exit(1)
        return (stdout, stderr)

    def remove_all(self, force=False):
        return self._remove(self.images, force=force)

    def remove_old(self, force=False):
        old_images = copy.deepcopy(self.images)
        newest_key = sorted(old_images)[-1]
        del old_images[newest_key]
        return self._remove(old_images, force=force)

    def _get_image_version(self, image):
        if 'version' in image.tags:
            return image.tags['version']
        else:
            return None

    def _get_package_version(self):
        ts = rpm.TransactionSet()
        matches = ts.dbMatch('name', self.IMAGE_NAME)
        for package in matches:
            return package['version']

    def install(self, tarball, version=None):
        ### Decompress image
        print "Decompressing tarball: " + tarball
        decompress_stdout, decompress_stderr = self._run_command(['/bin/tar', 'vxJf', tarball])
        ### Bundle and upload image
        image_file = decompress_stdout.strip()
        print "Installing image from {0}".format(image_file)
        version_string = self._get_package_version() if version is None \
            else "{0}".format(version)
        bucket = self.IMAGE_NAME + '-' + version_string
        image_name = "{0}-v{1}".format(self.IMAGE_NAME, version_string)
        print "Bundling, uploading and registering image to bucket: " + bucket
        bundle_stdout, bundle_stderr = \
            self._run_command(['euca-install-image',
                               '-b', bucket, '-i', image_file,
                               '-r', 'x86_64', '-n', image_name, '--virt', 'hvm',
                               '--region', self.region,
                               '--user', self.get_env_var('EC2_USER_ID'),
                               '--ec2cert', self.get_env_var('EUCALYPTUS_CERT')], self._debug)
        # HACK: Popping the second to
        #       last line off of install (ie the IMAGE line)
        emi_id = bundle_stdout.split('\n')[-2].split().pop()
        tags = {'type': self.IMAGE_NAME,
                'version': version_string,
                'provides': ",".join(self.PROVIDED_SERVICES)}
        self._ec2.create_tags([emi_id], tags=tags)
        print "Registered image: " + emi_id
        self._run_command(['rm', '-f', image_file])
        for service in self.PROVIDED_SERVICES:
            self.enable(emi_id, service)
        return emi_id

    def get_enabled(self):
        enabled_images = []
        for service in self.PROVIDED_SERVICES:
            enabled_images.append(self.get_enabled_service_image(service))
        return enabled_images

    def get_enabled_service_image(self, service):
        return self._get_property('services.{0}.worker.image'.format(service))

    def enable(self, imageid, service):
        self._set_property('services.{0}.worker.image'.format(service), imageid)


if __name__ == "__main__":
    description = '''
    Service Image Installation Tool:

    This tool provides an easy way to install a Eucalyptus Service image.
    Normally, you'll want to pass '--install-default' to install the
    latest Service image and register it with Eucalyptus. You may next want
    to pass '--remove-old' if you need to clean up older versions of the
    Service image(s).

    Installed Service images will be marked with a "version" number
    that reflects package number. The larger the "version", the more recently
    the Service has been installed (packaged).
    '''

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=description)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-t', '--tarball', metavar='TARBALL', help=argparse.SUPPRESS)
    group.add_argument('--install-default', action='store_true',
                       help='''This option must be supplied if you
                       would like to install the default tarball''')
    group.add_argument('--remove-old', action='store_true',
                       help='''Remove OLD Service images. Your most
                       recently installed Service images and your
                       currently enabled Service image will not be
                       removed. Most of the time, these will be the
                       same Imaging Service image.''')
    group.add_argument('--remove-all', action='store_true',
                       help='''Remove ALL Service images. The
                       currently enabled Service image(s) will be skipped
                       unless '--force' is passed as well.''')
    parser.add_argument('--force', action='store_true', help='''Force
                        an operation. This will force removal of
                        enabled Service images.''')
    parser.add_argument('--debug', help='Show debugging output', action='store_true')
    parser.add_argument('--force-version', help=argparse.SUPPRESS)
    parser.add_argument('--region', metavar='REGION', help=('region '
                                                            'name to search when looking up config file data'))

    args = parser.parse_args()
    ism = ServiceImageManager(args.region, args.debug)

    if args.tarball:
        ism.install(args.tarball, args.force_version)
    elif args.install_default:
        print 'Installing Service Image...'
        try:
            tarball = glob.glob('{0}/*.tar.xz'.format(DEFAULT_IMAGE_LOCATION))[0]
            print 'Found tarball {0}'.format(tarball)
            ism.install(tarball)
        except IndexError:
            print >> sys.stderr, "Error: failed to find a Service tarball."
            print >> sys.stderr, "Try supplying one on the command line with '-t'."
            sys.exit(1)
    elif args.remove_old:
        imageids = ism.remove_old(force=args.force)
        for imageid in imageids:
            print "Removed {0}".format(imageid)
    elif args.remove_all:
        imageids = ism.remove_all(force=args.force)
        for imageid in imageids:
            print "Removed {0}".format(imageid)
